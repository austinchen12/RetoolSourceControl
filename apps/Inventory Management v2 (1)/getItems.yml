id: getItems
type: datasource
subtype: SqlQueryUnified
resourceName: ce279da8-3b32-482f-a5f6-a646ec791a79
template:
  ordered:
    - queryRefreshTime: ''
    - records: ''
    - lastReceivedFromResourceAt: null
    - databasePasswordOverride: ''
    - queryDisabledMessage: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - showFailureToaster: true
    - query: |-
        with "itemsWithWH" as (
          select 
            items.id,
            items.title,
            items."reviewsCount",
            items."thumbnailImage",
            items."price/value",
            items."price/currency",
            items."brand",
            array_agg(distinct wh."warehouseId") as warehouses
          from items
          join "warehouseItems" as wh 
          on wh."itemId" = items.id
          group by 1, 2, 3, 4, 5, 6
        )
        select * from "itemsWithWH"
        where
          title ilike {{ '%' + (Products_SearchInput.value || Filters_ProductSearchInput.value) + '%' }}
          and ({{ !Filters_BrandSelect.value }}
            or brand = {{ Filters_BrandSelect.value }})
          and ({{ !Filters_WarehouseSelect.value }}
            or {{ Filters_WarehouseSelect.value || 0 }} = any(warehouses))
          and ({{ !Products_Scanner.data }} or id = {{ Products_Scanner.data ? Products_Scanner.data[0] : 0 }})
        order by "reviewsCount" desc
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - warningCodes: []
    - data: null
    - recordId: ''
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - dataArray: []
    - cacheKeyTtl: ''
    - filterBy: ''
    - databaseHostOverride: ''
    - metadata: null
    - editorMode: sql
    - actionType: ''
    - changesetObject: ''
    - shouldUseLegacySql: false
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - databaseNameOverride: ''
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - enableBulkUpdates: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - bulkUpdatePrimaryKey: ''
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - tableName: ''
    - queryTimeout: '10000'
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - databaseUsernameOverride: ''
    - shouldEnableBatchQuerying: false
    - doNotThrowOnNoOp: false
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-07-27T16:55:33.483Z
