id: getShipments
type: datasource
subtype: SqlQueryUnified
resourceName: ce279da8-3b32-482f-a5f6-a646ec791a79
template:
  ordered:
    - queryRefreshTime: ''
    - records: ''
    - lastReceivedFromResourceAt: null
    - databasePasswordOverride: ''
    - queryDisabledMessage: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - showFailureToaster: true
    - query: |
        select 
          shipments.id,
          shipments.date,
          shipments.status,
          shipments.notes,
          "fromWH".street as "fromStreet",
          "toWH".street as "toStreet"
        from shipments
        join warehouses as "fromWH"
          on "fromWH".id = shipments."fromWarehouseId"
        join warehouses as "toWH"
          on "toWH".id = shipments."toWarehouseId"
        where 
          ({{ Shipments_DirectionSelect.value === 'Inbound' }}
            or "fromWarehouseId" = {{ Shipments_WarehouseSelect.value }})
          and ({{ Shipments_DirectionSelect.value === 'Outbound' }}
            or "toWarehouseId" = {{ Shipments_WarehouseSelect.value }})
          and (date >= {{ moment(Shipments_FromDateSelect.value).format('YYYY-MM-DD') }} and date <= {{ moment(Shipments_ToDateSelect.value).format('YYYY-MM-DD') }})
        group by 1, 2, 3, 4, 5, 6
        order by 2 desc
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - warningCodes: []
    - data: null
    - recordId: ''
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - dataArray: []
    - cacheKeyTtl: ''
    - filterBy: ''
    - databaseHostOverride: ''
    - metadata: null
    - editorMode: sql
    - actionType: ''
    - changesetObject: ''
    - shouldUseLegacySql: false
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - databaseNameOverride: ''
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - enableBulkUpdates: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - bulkUpdatePrimaryKey: ''
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - tableName: ''
    - queryTimeout: '10000'
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - databaseUsernameOverride: ''
    - shouldEnableBatchQuerying: false
    - doNotThrowOnNoOp: false
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-07-27T19:18:04.596Z
